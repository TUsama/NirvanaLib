plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id "me.modmuss50.mod-publish-plugin" version "0.8.1"
    id 'com.gradleup.shadow' version '9.0.0-beta4'

}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
configurations {
    shade
    implementation.extendsFrom shade
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'


    shade "io.vavr:vavr:0.10.4"
    shade ("net.neoforged:bus:${neoforge_eventbus_version}") {
        exclude group: "org.ow2.asm"
        exclude group: "net.jodah"
        exclude group: "org.apache.logging.log4j"
        exclude group: "cpw.mods", module: "modlauncher"
    }

    modImplementation "me.fzzyhmstrs:fzzy_config:${fzzy_config_version}"
}



loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}


processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from project(":common").sourceSets.main.resources
}

shadowJar {
    configurations = [project.configurations.shade]
    archiveClassifier = "shadow"
    relocate 'net.neoforged.bus', "${project.group}.relocated.net.neoforged.bus"
    relocate 'io.vavr', "${project.group}.relocated.io.vavr"
}

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    inputFile = file(tasks.shadowJar.archiveFile)
}

publishMods {
    file = tasks.remapJar.archiveFile
    displayName = file.map { it.asFile.name }
    changelog = file("..\\changelog.md").text.split('\n').collect { string -> {
        if (!string.isBlank()) {
            string + "</br>"
        } else {
            string
        }
    }}.join('\n')
    type = STABLE
    modLoaders.add("fabric")
    curseforge {
        accessToken = file("D:\\curseforge-key.txt").text
        projectId = "${project_id}"
        minecraftVersionRange {
            start = "1.21"
            end = "${minecraft_version}"
        }
    }
}


